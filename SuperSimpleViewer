# 右クリックしたらファイル名がクリップボードにコピーされるので、メモ帳などにコピペ
# When you right-click, the file name is copied to the clipboard, so you can paste it into applications like Notepad.
#
# 画像ビューアを作成する
from tkinter import *
from PIL import Image, ImageTk
from tkinter import filedialog
import os
import pyperclip  # Import the pyperclip module for clipboard operations

class ImageViewer:
    def __init__(self, root):
        self.root = root
        self.image_folder = ""
        self.images = []
        self.current_image_index = 0
        self.create_widgets()

    def create_widgets(self):
        folder_button = Button(self.root, text="画像フォルダを選択", command=self.choose_folder)
        folder_button.pack()

        prev_button = Button(self.root, text="前へ", command=self.show_prev_image, state=DISABLED)
        prev_button.pack(side=LEFT)
        self.prev_button = prev_button  # Store a reference to the previous button

        next_button = Button(self.root, text="次へ", command=self.show_next_image, state=DISABLED)
        next_button.pack(side=RIGHT)
        self.next_button = next_button  # Store a reference to the next button

        self.label = Label(self.root, text="画像フォルダを選択してください")
        self.label.pack()

        self.file_path_label = Label(self.root, text="ファイルパス: ")
        self.file_path_label.pack()

        # Bind right-click event to the label
        self.label.bind("<Button-3>", self.copy_image_path_to_clipboard)

    def choose_folder(self):
        self.image_folder = filedialog.askdirectory()
        if self.image_folder:
            self.images = [f for f in os.listdir(self.image_folder) if f.endswith(('.png', '.jpg', '.jpeg', '.gif'))]
            if self.images:
                self.current_image_index = 0
                self.load_image()
                self.update_ui()

    def load_image(self):
        image_path = os.path.join(self.image_folder, self.images[self.current_image_index])
        self.image = Image.open(image_path)
        self.photo = ImageTk.PhotoImage(self.image)
        self.label.configure(image=self.photo)  # Update the label with the loaded image
        self.file_path_label.configure(text=f"ファイルパス: {image_path}") 

    def update_ui(self):
        self.label.configure(text=f"画像フォルダ: {self.image_folder}")
        self.label.pack()
        self.prev_button.config(state=NORMAL if len(self.images) > 1 else DISABLED)
        self.next_button.config(state=NORMAL if len(self.images) > 1 else DISABLED)

    def show_prev_image(self):
        self.current_image_index = (self.current_image_index - 1) % len(self.images)
        self.load_image()  # Reload the image when showing the previous one

    def show_next_image(self):
        self.current_image_index = (self.current_image_index + 1) % len(self.images)
        self.load_image()  # Reload the image when showing the next one

    def copy_image_path_to_clipboard(self, event):
        image_path = os.path.join(self.image_folder, self.images[self.current_image_index])
        pyperclip.copy(image_path)  # Copy the image path to the clipboard

    def get_file_name(self):
        return self.images[self.current_image_index]

if __name__ == "__main__":
    root = Tk()
    root.title("Simple Image Viewer")
    
    viewer = ImageViewer(root)

    root.mainloop()
