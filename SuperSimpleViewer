"""

# Super Simple Viewer X #

1. Select Image Folder: Button Click

2. Shortcut Keys:
- Previous Image: 'd' key or 'Return' key
- Next Image: 'a' key or 'Shift + Return' key
- Open Notepad: 'Ctrl + n'
- Copy Image Path: 'Ctrl + c'
- Copy Full Image Path: 'Ctrl + p'

"""

from tkinter import *
from PIL import Image, ImageTk
from tkinter import filedialog
import os
import pyperclip
from datetime import datetime
import subprocess  # Import subprocess to open Notepad

class ImageViewer:
    def __init__(self, root):
        self.root = root
        self.image_folder = ""
        self.images = []
        self.current_image_index = 0
        self.create_widgets()

    def create_widgets(self):
        folder_button = Button(self.root, text="Select Image Folder", command=self.choose_folder)
        folder_button.pack()

        prev_button = Button(self.root, text="Previous", command=self.show_prev_image, state=DISABLED)
        prev_button.pack(side=LEFT)
        self.prev_button = prev_button

        next_button = Button(self.root, text="Next", command=self.show_next_image, state=DISABLED)
        next_button.pack(side=RIGHT)
        self.next_button = next_button

        self.label = Label(self.root, text="Please select an image folder")
        self.label.pack()

        self.file_path_label = Label(self.root, text="File Name: ")
        self.file_path_label.pack()

        self.label.bind("<Button-3>", self.copy_image_path_to_clipboard)

        # Shortcut keys.

        # Previous: d (or) return
        self.root.bind('<d>', self.on_return_key)
        self.root.bind('<Return>', self.on_return_key)
        # Return: s (or) shift + return
        self.root.bind('<a>', self.on_shift_return_key)
        self.root.bind('<Shift-Return>', self.on_shift_return_key)                     
        # Open Notepad: Ctrl + n
        self.root.bind('<Control-n>', self.open_notepad)
        # Copy image path: Ctrl + c
        self.root.bind('<Control-c>', self.copy_file_name_to_clipboard)
        # Copy full image path: Ctrl + p
        self.root.bind('<Control-p>', self.copy_image_path_to_clipboard_shortcut)

    def choose_folder(self):
        self.image_folder = filedialog.askdirectory()
        if self.image_folder:
            self.images = [f for f in os.listdir(self.image_folder) if f.endswith(('.png', '.jpg', '.jpeg', '.gif'))]
            if self.images:
                self.images.sort(key=lambda x: datetime.fromtimestamp(os.path.getmtime(os.path.join(self.image_folder, x))), reverse=True)
                self.current_image_index = 0
                self.load_image()
                self.update_ui()

    def load_image(self):
        image_path = os.path.join(self.image_folder, self.images[self.current_image_index])
        self.image = Image.open(image_path)
        self.photo = ImageTk.PhotoImage(self.image)
        self.label.configure(image=self.photo)
        self.file_path_label.configure(text=f"File Name: {self.get_file_name()}")

    def update_ui(self):
        self.label.configure(text=f"Image Folder: {self.image_folder}")
        self.label.pack()
        self.prev_button.config(state=NORMAL if len(self.images) > 1 else DISABLED)
        self.next_button.config(state=NORMAL if len(self.images) > 1 else DISABLED)

    def show_prev_image(self, event=None):
        self.current_image_index = (self.current_image_index - 1) % len(self.images)
        self.load_image()

    def show_next_image(self, event=None):
        self.current_image_index = (self.current_image_index + 1) % len(self.images)
        self.load_image()

    def show_back_image(self, event=None):
        self.current_image_index = (self.current_image_index - 2) % len(self.images)
        self.load_image()

    def copy_image_path_to_clipboard(self, event):
        image_path = os.path.join(self.image_folder, self.images[self.current_image_index])
        pyperclip.copy(image_path)

    def copy_image_path_to_clipboard_shortcut(self, event):
        image_path = os.path.join(self.image_folder, self.images[self.current_image_index])
        pyperclip.copy(image_path)

    def copy_file_name_to_clipboard(self, event):
        file_name = self.get_file_name()
        pyperclip.copy(file_name)

    def get_file_name(self):
        return self.images[self.current_image_index]

    def on_return_key(self, event):
        if len(self.images) > 1:
            self.show_next_image()

    def on_shift_return_key(self, event):
        if len(self.images) > 1:
            self.show_prev_image()

    def open_notepad(self, event):
        subprocess.Popen(["notepad.exe"])

if __name__ == "__main__":
    root = Tk()
    root.title("Simple Image Viewer")

    viewer = ImageViewer(root)

    root.mainloop()
